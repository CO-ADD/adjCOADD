# Generated by Django 4.2.2 on 2023-09-18 01:20

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dorganism', '0002_alter_organism_options_and_more'),
        ('dscreen', '0002_remove_screen_run_run_owner_screen_run_assay_note_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('apputil', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genome_Sequence',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('seq_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Seq ID')),
                ('seq_name', models.CharField(blank=True, max_length=120, unique=True, verbose_name='Seq Name')),
                ('source', models.CharField(blank=True, max_length=250, verbose_name='Source')),
                ('source_code', models.CharField(blank=True, max_length=120, verbose_name='Source Code')),
                ('source_link', models.CharField(blank=True, max_length=120, verbose_name='Source Link')),
                ('seq_date', models.DateField(blank=True, null=True, verbose_name='Seq Date')),
                ('reference', models.CharField(blank=True, max_length=150, verbose_name='Reference')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('orgbatch_id', models.ForeignKey(blank=True, db_column='orgbatch_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_orgbatch_id', to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
                ('run_id', models.ForeignKey(db_column='run_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_run_id', to='dscreen.screen_run', verbose_name='Run ID')),
                ('seq_method', models.ForeignKey(blank=True, db_column='seq_method', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_seqmethod', to='apputil.dictionary', verbose_name='Seq Method')),
                ('seq_type', models.ForeignKey(blank=True, db_column='seq_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_seqtype', to='apputil.dictionary', verbose_name='Seq Type')),
            ],
            options={
                'db_table': 'genome_seq',
                'ordering': ['seq_id'],
            },
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('gene_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Drug ID')),
                ('gene_name', models.CharField(max_length=25, unique=True, verbose_name='Gene Name')),
                ('gene_note', models.CharField(max_length=120, verbose_name='Gene Note')),
                ('gene_modification', models.CharField(max_length=120, verbose_name='Modification')),
                ('protein_name', models.CharField(blank=True, max_length=150, verbose_name='Protein')),
                ('protein_class', models.CharField(blank=True, max_length=50, verbose_name='Class')),
                ('protein_subclass', models.CharField(blank=True, max_length=50, verbose_name='SubClass')),
                ('resistance_class', models.CharField(blank=True, max_length=50, verbose_name='Resistance Class')),
                ('variants', models.CharField(blank=True, max_length=120, verbose_name='Variants')),
                ('genbank', models.CharField(blank=True, max_length=120, verbose_name='GenBank')),
                ('uniprot', models.CharField(blank=True, max_length=120, verbose_name='UniProt')),
                ('organisms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=10, verbose_name='Organisms')),
                ('source', models.CharField(blank=True, max_length=250, verbose_name='Source')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('gene_type', models.ForeignKey(blank=True, db_column='gene_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_genetype', to='apputil.dictionary', verbose_name='Gene Type')),
            ],
            options={
                'db_table': 'gene',
                'ordering': ['gene_type', 'resistance_class', 'gene_name'],
            },
        ),
        migrations.CreateModel(
            name='WGS_FastQC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('seq', models.CharField(blank=True, max_length=5, verbose_name='Seq')),
                ('base_stat', models.CharField(blank=True, max_length=10, verbose_name='Basic Statistics')),
                ('base_sequal', models.CharField(blank=True, max_length=10, verbose_name='Per base sequence quality')),
                ('tile_sequal', models.CharField(blank=True, max_length=10, verbose_name='Per tile sequence quality')),
                ('seq_qualsc', models.CharField(blank=True, max_length=10, verbose_name='Per sequence quality scores')),
                ('base_gc', models.CharField(blank=True, max_length=10, verbose_name='Per base sequence content')),
                ('seq_gc', models.CharField(blank=True, max_length=10, verbose_name='Per sequence GC content')),
                ('base_N', models.CharField(blank=True, max_length=10, verbose_name='Per base N content')),
                ('seq_len', models.CharField(blank=True, max_length=10, verbose_name='Sequence Length Distribution')),
                ('seq_dup', models.CharField(blank=True, max_length=10, verbose_name='Sequence Duplication Levels')),
                ('overrep', models.CharField(blank=True, max_length=10, verbose_name='Overrepresented sequences')),
                ('adap_cont', models.CharField(blank=True, max_length=10, verbose_name='Adapter Content')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('orgbatch_id', models.ForeignKey(db_column='orgbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_orgbatch_id', to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
                ('seq_id', models.ForeignKey(db_column='seq_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)seq_id', to='dgene.genome_sequence', verbose_name='Seq ID')),
            ],
            options={
                'db_table': 'wgs_fastqc',
                'ordering': ['orgbatch_id', 'seq', 'seq_id'],
                'indexes': [models.Index(fields=['orgbatch_id'], name='fastqc_orgbid_idx'), models.Index(fields=['seq'], name='fastqc_seq_idx'), models.Index(fields=['seq_id'], name='fastqc_seqid_idx')],
            },
        ),
        migrations.CreateModel(
            name='WGS_CheckM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('assembly', models.CharField(blank=True, max_length=25, verbose_name='Assembly')),
                ('assembly_qc', models.CharField(blank=True, max_length=15, verbose_name='Assembly QC')),
                ('marker_lineage', models.CharField(blank=True, max_length=25, verbose_name='Linage')),
                ('n_genomes', models.IntegerField(blank=True, default=0, verbose_name='n_genomes')),
                ('n_predit_genes', models.IntegerField(blank=True, default=0, verbose_name='n_predit_genes')),
                ('n_markers', models.IntegerField(blank=True, default=0, verbose_name='n_markers')),
                ('n_marker_sets', models.IntegerField(blank=True, default=0, verbose_name='n_marker_sets')),
                ('n_contigs', models.IntegerField(blank=True, default=0, verbose_name='n_contigs')),
                ('genome_size', models.IntegerField(blank=True, default=0, verbose_name='genome_size')),
                ('coding_density', models.FloatField(blank=True, default=0, verbose_name='coding_density')),
                ('completeness', models.FloatField(blank=True, default=0, verbose_name='completeness')),
                ('contamination', models.FloatField(blank=True, default=0, verbose_name='contamination')),
                ('gc', models.FloatField(blank=True, default=0, verbose_name='gc')),
                ('gc_std', models.FloatField(blank=True, default=0, verbose_name='gc_std')),
                ('n_ambig_bases', models.IntegerField(blank=True, default=0, verbose_name='n_ambig_bases')),
                ('longest_contig', models.IntegerField(blank=True, default=0, verbose_name='longest_contig')),
                ('mean_contigs', models.FloatField(blank=True, default=0, verbose_name='mean_contigs')),
                ('n50_contigs', models.IntegerField(blank=True, default=0, verbose_name='N50_contigs')),
                ('trans_table', models.IntegerField(blank=True, default=0, verbose_name='trans_table')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('orgbatch_id', models.ForeignKey(db_column='orgbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_orgbatch_id', to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
                ('seq_id', models.ForeignKey(db_column='seq_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)seq_id', to='dgene.genome_sequence', verbose_name='Seq ID')),
            ],
            options={
                'db_table': 'wgs_checkm',
                'ordering': ['orgbatch_id', 'seq_id'],
                'indexes': [models.Index(fields=['orgbatch_id'], name='checkqc_orgbid_idx'), models.Index(fields=['seq_id'], name='checkqc_seqid_idx')],
            },
        ),
        migrations.CreateModel(
            name='ID_Sequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('kraken_organisms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Kraken2 Organisms')),
                ('mlst_scheme', models.CharField(blank=True, max_length=20, verbose_name='MLST Scheme')),
                ('mlst_seqtype', models.CharField(blank=True, max_length=12, verbose_name='MLST SeqType')),
                ('mlst_alleles', models.CharField(blank=True, max_length=150, verbose_name='MLST Alleles')),
                ('gtdbtk_class', models.CharField(blank=True, max_length=120, verbose_name='MLST Scheme')),
                ('gtdbtk_fastani', models.CharField(blank=True, max_length=50, verbose_name='MLST SeqType')),
                ('id_notes', models.CharField(blank=True, max_length=120, verbose_name='ID Notes')),
                ('source', models.CharField(blank=True, max_length=20, verbose_name='Source')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('orgbatch_id', models.ForeignKey(db_column='orgbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_orgbatch_id', to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
                ('seq_file', models.ForeignKey(blank=True, db_column='seq_file', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_seqfile', to='apputil.dictionary', verbose_name='Seq File')),
                ('seq_id', models.ForeignKey(db_column='seq_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_seq_id', to='dgene.genome_sequence', verbose_name='Seq ID')),
            ],
            options={
                'db_table': 'id_seq',
                'ordering': ['orgbatch_id', 'seq_id'],
                'indexes': [models.Index(fields=['orgbatch_id'], name='idseq_drugid_idx'), models.Index(fields=['seq_file'], name='idseq_seqfile_idx'), models.Index(fields=['seq_id'], name='idseq_seqid_idx'), models.Index(fields=['source'], name='idseq_source_idx')],
            },
        ),
        migrations.CreateModel(
            name='ID_Pub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('id_method', models.CharField(blank=True, max_length=25, verbose_name='Method')),
                ('id_organisms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Organisms')),
                ('id_notes', models.CharField(blank=True, max_length=120, verbose_name='ID Notes')),
                ('id_date', models.DateField(blank=True, null=True, verbose_name='ID Date')),
                ('source', models.CharField(blank=True, max_length=20, verbose_name='Source')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('id_type', models.ForeignKey(blank=True, db_column='id_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_idtype', to='apputil.dictionary', verbose_name='ID Method')),
                ('orgbatch_id', models.ForeignKey(db_column='orgbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_orgbatch_id', to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
            ],
            options={
                'db_table': 'id_pub',
                'indexes': [models.Index(fields=['id_organisms'], name='idp_org_idx'), models.Index(fields=['id_type'], name='idp_idtype_idx'), models.Index(fields=['source'], name='idp_source_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='genome_sequence',
            index=models.Index(fields=['seq_id'], name='genoseq_seqid_idx'),
        ),
        migrations.AddIndex(
            model_name='genome_sequence',
            index=models.Index(fields=['source'], name='genoseq_scr_idx'),
        ),
        migrations.AddIndex(
            model_name='genome_sequence',
            index=models.Index(fields=['seq_name'], name='genoseq_seqnm_idx'),
        ),
        migrations.AddIndex(
            model_name='genome_sequence',
            index=models.Index(fields=['source_code'], name='genoseq_scode_idx'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['gene_type'], name='gene_gtype_idx'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['resistance_class'], name='gene_rclass_idx'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['gene_modification'], name='gene_gmod_idx'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['protein_class'], name='gene_pclass_idx'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['protein_subclass'], name='gene_psclass_idx'),
        ),
    ]
