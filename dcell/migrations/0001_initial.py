# Generated by Django 4.2.2 on 2024-05-21 03:35

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dorganism', '0003_organism_batch_batch_quality_and_more'),
        ('apputil', '0003_alter_applicationlog_log_code_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('cell_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Cell ID')),
                ('cell_line', models.CharField(blank=True, max_length=200, verbose_name='Cell Line')),
                ('cell_names', models.CharField(blank=True, max_length=200, verbose_name='Cell Names')),
                ('cell_notes', models.CharField(blank=True, max_length=1024, verbose_name='Cell Notes')),
                ('cell_code', models.CharField(blank=True, max_length=30, verbose_name='Cell Code')),
                ('cell_panel', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Panel')),
                ('cell_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Type')),
                ('cell_identification', models.CharField(blank=True, max_length=512, verbose_name='Cell Identification')),
                ('cell_origin', models.CharField(blank=True, max_length=512, verbose_name='Origin of Cell')),
                ('source', models.CharField(blank=True, max_length=250, verbose_name='Source')),
                ('source_code', models.CharField(blank=True, max_length=120, verbose_name='Source Code')),
                ('reference', models.CharField(blank=True, max_length=150, verbose_name='Reference')),
                ('mta_document', models.CharField(blank=True, max_length=150, verbose_name='MTA Document')),
                ('mta_notes', models.CharField(blank=True, max_length=512, verbose_name='MTA Notes')),
                ('collect_tissue', models.CharField(blank=True, max_length=120, verbose_name='From Tissue/Organ')),
                ('patient_diagnosis', models.CharField(blank=True, max_length=120, verbose_name='Patient Diagnosis')),
                ('patient', models.CharField(blank=True, max_length=20, verbose_name='Patient Info')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('assoc_documents', models.ManyToManyField(blank=True, db_table='cell_doc', related_name='%(class)s_document', to='apputil.document', verbose_name='Documents')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(blank=True, db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_biologist', to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('mta_status', models.ForeignKey(blank=True, db_column='mta_status', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_mta', to='apputil.dictionary', verbose_name='MTA Status')),
                ('organism_name', models.ForeignKey(db_column='organism_name', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_organism_name', to='dorganism.taxonomy', verbose_name='Organism Name')),
            ],
            options={
                'db_table': 'cell',
            },
        ),
        migrations.CreateModel(
            name='Cell_Batch',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('cellbatch_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='CellBatch ID')),
                ('previous_batch_id', models.CharField(max_length=20, verbose_name='Previous CellBatch ID')),
                ('passage_number', models.CharField(max_length=20, verbose_name='Passage Number')),
                ('batch_id', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', 'Only alphanumeric characters are allowed.')], verbose_name='Batch ID')),
                ('batch_notes', models.CharField(blank=True, max_length=500, verbose_name='Batch Notes')),
                ('quality_source', models.CharField(blank=True, max_length=150, verbose_name='QC Source')),
                ('qc_record', models.CharField(blank=True, max_length=150, verbose_name='QC Records')),
                ('stock_date', models.DateField(blank=True, null=True, verbose_name='Stock Date')),
                ('stock_level', models.CharField(blank=True, max_length=20, verbose_name='Stock Levels')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('batch_quality', models.ForeignKey(blank=True, db_column='batch_quality', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_batchquality', to='apputil.dictionary', verbose_name='Quality')),
                ('biologist', models.ForeignKey(blank=True, db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_biologist', to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('cell_id', models.ForeignKey(db_column='cell_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_cell_id', to='dcell.cell', verbose_name='Cell ID')),
                ('qc_status', models.ForeignKey(blank=True, db_column='qc_status', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_qc', to='apputil.dictionary', verbose_name='QC status')),
            ],
            options={
                'db_table': 'cellbatch',
                'ordering': ['cellbatch_id'],
            },
        ),
        migrations.CreateModel(
            name='CellBatch_Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('n_created', models.IntegerField(default=0, verbose_name='#Created')),
                ('n_left', models.IntegerField(default=0, verbose_name='#Left')),
                ('stock_date', models.DateField(blank=True, null=True, verbose_name='Stock Date')),
                ('stock_note', models.CharField(blank=True, max_length=10, verbose_name='Stock Note')),
                ('location_freezer', models.CharField(blank=True, max_length=80, verbose_name='Freezer')),
                ('location_rack', models.CharField(blank=True, max_length=10, verbose_name='Rack')),
                ('location_column', models.CharField(blank=True, max_length=10, verbose_name='Column')),
                ('location_slot', models.CharField(blank=True, max_length=10, verbose_name='Slot')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(blank=True, db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_biologist', to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('cellbatch_id', models.ForeignKey(db_column='cellbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_cellbatch_id', to='dcell.cell_batch', verbose_name='CellBatch ID')),
                ('stock_type', models.ForeignKey(db_column='stock_type', on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_stock', to='apputil.dictionary', verbose_name='Stock Type')),
            ],
            options={
                'db_table': 'cellbatch_stock',
                'ordering': ['cellbatch_id', 'stock_type'],
                'indexes': [models.Index(fields=['stock_type'], name='cellbstock_stype_idx'), models.Index(fields=['location_freezer'], name='cellbstock_freezer_idx'), models.Index(fields=['stock_date'], name='cellbstock_stdate_idx'), models.Index(fields=['n_left'], name='cellbstock_nleft_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='cell_batch',
            index=models.Index(fields=['cell_id', 'batch_id'], name='cellbatch_cellbatch_idx'),
        ),
        migrations.AddIndex(
            model_name='cell_batch',
            index=models.Index(fields=['qc_status'], name='cellbatch_qc_idx'),
        ),
        migrations.AddIndex(
            model_name='cell_batch',
            index=models.Index(fields=['stock_date'], name='cellbatch_sdate_idx'),
        ),
        migrations.AddIndex(
            model_name='cell_batch',
            index=models.Index(fields=['stock_level'], name='cellbatch_slevel_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['cell_line'], name='cell_line_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['cell_code'], name='cell_cellcode_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['cell_type'], name='cell_celltype_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['cell_panel'], name='cell_cellpanel_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['source'], name='cell_source_idx'),
        ),
    ]
