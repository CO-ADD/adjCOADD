"""
Django settings for adjCOADD project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
import psycopg2.extensions
import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, LDAPGroupQuery, PosixGroupType


print(f"Project: adjCOADD ")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#--------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

#======================================================================
# Define Version 
#======================================================================
# Development : None - Production
#               Work - Devlopment using imb-co-add-work PostgrSQL database
#               Local - Devlopment using local PostgrSQL database  
#               Meran - Devlopment using Schlern PostgrSQL database  
DEVELOPMENT=None
#DEVELOPMENT='Work'


#........................................................................
if DEVELOPMENT:
    # Development -----------------------------------------------------------------------
    VERSION = '1.3.0263 Development'
    DEBUG = True
    ALLOWED_HOSTS = ["0.0.0.0", "imb-coadd-work.imb.uq.edu.au", "localhost", "127.0.0.1"]

    UPLOAD_DIR = os.path.join(BASE_DIR.parent, 'uploads')
    MEDIA_URL = ('uploads/')
    MEDIA_ROOT= UPLOAD_DIR

    STATIC_URL = 'static/'
    STATICFILES_DIRS=[os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR.parent, 'static')

    DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'backup')}

    MOL_IMG_URL = 'static/images/mol'
    MOL_IMG_DIR = os.path.join(BASE_DIR, 'static/images/mol') 

else:
    # Production ----------------------------------------------------------------------
    VERSION = '1.3.1'
    DEBUG = False
    ALLOWED_HOSTS = ["0.0.0.0", "imb-coadd.imb.uq.edu.au", "localhost", "127.0.0.1"]

    UPLOAD_DIR = '/opt/django/var/uploads/'
    MEDIA_URL = ('uploads/')
    MEDIA_ROOT= UPLOAD_DIR

    STATIC_URL = 'static/'
    STATICFILES_DIRS=[os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR.parent, 'static')

    DBBACKUP_STORAGE_OPTIONS = {'location': '/opt/django/var/backup'}

    MOL_IMG_URL = 'static/images/mol'
    MOL_IMG_DIR = os.path.join(STATIC_ROOT, 'images/mol')

print(f"Version: {VERSION}")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
#--------------------------------------------------------------------

#STRUCTURE_FILES_DIR=os.path.join(STATIC_ROOT, 'static/images')

#======================================================================

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ["SECRET_KEY"]
SECRET_KEY = os.environ.get('SECRET_KEY') or 'django-insecure-_fzrv(t#j+r4y)7s$nm=v!qt=+!@vs(2-=z)ls(h^$ozyj!$g^'

# SECURITY WARNING: don't run with debug turned on in production!



# Application definition
#--------------------------------------------------------------------
INSTALLED_APPS = [
    'django_crontab',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',   
    "django.contrib.postgres",
    'django_rdkit',
    'django_filters',
    'dbbackup',
    "sequences.apps.SequencesConfig",
    'apputil.apps.ApputilConfig',
    'dorganism.apps.dOrganismConfig',
    'ddrug.apps.dDrugConfig',
    'dscreen.apps.dScreenConfig',
    'dcollab.apps.dCollabConfig',
    'dgene.apps.dGeneConfig',
    'dcell.apps.dCellConfig',
    'dchem.apps.dChemConfig',
    'dsample.apps.dSampleConfig',
    'dplate.apps.dPlateConfig',
    #'rest_framework',
    #'rest_framework.authtoken',
    'formtools',
    'pgtrigger',
]

#--------------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

#--------------------------------------------------------------------
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'USER_ID_FIELD': 'username',  # Update this line to use the 'username' field as the user identifier
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

#--------------------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apputil.clear_session_middleware.ClearSessionMiddleware',
]

ROOT_URLCONF = 'adjcoadd.urls'

#--------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR/'templates',
        #    BASE_DIR/,
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'adjcoadd.wsgi.application'
TEST_RUNNER = 'django.test.runner.DiscoverRunner'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
#--------------------------------------------------------------------
if DEVELOPMENT:
    DB_NAME = os.environ.get('db_name') or 'orgdb'
    DB_USER = os.environ.get('db_usr') or 'orgdb'
    DB_PASSWD = os.environ.get('password') or 'orgdb'
    PG_ENGINE = 'django.db.backends.postgresql_psycopg2'
    if DEVELOPMENT == 'Local':
        HOST_NAME = 'Localhost'
    elif DEVELOPMENT == 'Work':
        HOST_NAME = 'imb-coadd-work.imb.uq.edu.au'
    elif DEVELOPMENT == 'Meran':
        HOST_NAME = 'schlern'
else:
    DB_NAME = os.environ.get('db_name') or 'coadd'
    DB_USER = os.environ.get('db_usr') or 'coadd'
    DB_PASSWD = os.environ.get('password') or 'MtMaroon23'
    PG_ENGINE = 'django.db.backends.postgresql_psycopg2'
    HOST_NAME = 'imb-coadd-db.imb.uq.edu.au'

print(f"Host Name: {HOST_NAME}")

DATABASES = {
    'default': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=apputil,dorganism,dcell,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
        # 'TEST_MIRROR': 'default',
        # "TEST": {
        #     "NAME": "dorganism",
            # "OPTIONS":{'options': '-c search_path=dorganism,apputil,public'}     
        # },
    },

    'dorganism': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dorganism,apputil,ddrug,dgene,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    'dcell': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dcell,dorganism,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    'ddrug': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=ddrug,dscreen,dorganism,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },

    'dscreen': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dscreen,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },

    'dgene': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dgene,dscreen,dorganism,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    
    'dcollab': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dcollab,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    'dchem': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dchem,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    'dsample': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dsample,dchem,dcollab,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    },
    'dplate': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dplate,dsample,apputil,public', 
                   'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': DB_NAME,'USER': DB_USER, 'PASSWORD':DB_PASSWD,
        'HOST': HOST_NAME, 'PORT': '5432',
    }
}

DATABASE_ROUTERS = ['adjcoadd.routers.DatabaseRouter',]

# Backup Database
#--------------------------------------------------------------------
# Requires django-dbbackup django-crontab and pg_dump/restore
DBBACKUP_DATABASES = ['default'
                      'dorganism','dcell','ddrug','dgene',
                      'dcollab','dscreen',
                      'dsample','dplate']

#DBBACKUP_DATABASES = list(DATABASES.keys())
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_CONNECTOR_MAPPING = {'django.db.backends.postgresql_psycopg2':'dbbackup.db.postgresql.PgDumpConnector'}

if DEVELOPMENT:
    #DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'backup')}
    DBBACKUP_FILENAME_TEMPLATE = 'adjCOADD-DB-'+DEVELOPMENT+'-{datetime}.{extension}'
    DBBACKUP_MEDIA_FILENAME_TEMPLATE = 'adjCOADD-Media-'+DEVELOPMENT+'-{datetime}.{extension}'
else:
    #DBBACKUP_STORAGE_OPTIONS = {'location': 'backup/'}
    DBBACKUP_FILENAME_TEMPLATE = 'adjCOADD-DB-{datetime}.{extension}'
    DBBACKUP_MEDIA_FILENAME_TEMPLATE = 'adjCOADD-Media-{datetime}.{extension}'

# CRON_CLASSES = [
#     "apputil.utils.cron.Backup_adjCOADD",
    # ...
#]
CRONJOBS = [
    # ('*/1 * * * *','django.core.management.call_command',['dbbackup','-z']),
    # ('*/1 * * * *','django.core.management.call_command',['mediabackup','-z'])
    ('0 0 * * FRI','apputil.utils.cron.Backup_adjCOADD'),
    # ('*/1 * * * *','django.core.management.call_command')
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
#--------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
#--------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Australia/Brisbane'
USE_I18N = True
USE_TZ = True
DATE_FORMAT = "d-m-Y"
USE_L10N = False

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
#--------------------------------------------------------------------
AUTH_USER_MODEL = 'apputil.ApplicationUser'
LOGOUT_REDIRECT_URL="/"
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#LDAP Autherntications
#--------------------------------------------------------------------
AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend", 
    "django.contrib.auth.backends.ModelBackend",
    ]
AUTH_LDAP_SERVER_URI = "ldap://ldap.uq.edu.au"
AUTH_LDAP_BIND_DN = ""
AUTH_LDAP_BIND_PASSWORD = ""
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=people,o=The University of Queensland,c=au", ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

# Security Setting
#--------------------------------------------------------------------
#CSRF_COOKIE_SECURE=True
CSRF_TRUSTED_ORIGINS = ["http://imb-coadd.imb.uq.edu.au:8008", "http://imb-coadd-db.imb.uq.edu.au", "http://imb-coadd-work.imb.uq.edu.au:8008", "http://127.0.0.1:8000"]
# CORS_REPLACE_HTTPS_REFERER      = True
# HOST_SCHEME                     = "https://"
# SECURE_PROXY_SSL_HEADER         = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT             = True
# SESSION_COOKIE_SECURE           = True
# CSRF_COOKIE_SECURE              = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS  = True
# SECURE_HSTS_SECONDS             = 1000000
# SECURE_FRAME_DENY               = True


# Django Session timeout setting
# INACTIVE_TIME= 120
# if DEVELOPMENT:
#     SESSION_COOKIE_AGE=3000
# else:
#     SESSION_COOKIE_AGE=3000
# SESSION_EXPIRE_SECONDS =  120   
# SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True   
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_IDLE_TIMEOUT = 120
SESSION_SAVE_EVERY_REQUEST=True

# RDKit Settings
#--------------------------------------------------------------------
DJANGO_RDKIT_MOL_SERIALIZATION = "TEXT"

# Logging files
#--------------------------------------------------------------------
LOG_PATH = os.path.join(BASE_DIR, 'applog')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(str(LOG_PATH), 'django_server.log'),
            'formatter': 'verbose',
        },
        'user': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(str(LOG_PATH), 'user.log'),
            # 'maxBytes': 1024 * 1024 * 10,
            # 'backupCount': 10,
            'formatter': 'verbose',
        },    
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 20, ## python logging levels: 10-'DEBUG', 40-'ERROR', 50-'CRITICAL', 30-'WARNING', 20-'INFO', 0-'Notset'
            'propagate': False,
        },
    
        'user_log': {
            'handlers': ['user'],
            'level': 'INFO',
        },
    },
}

X_FRAME_OPTIONS = 'ALLOWALL'
XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']

# -------------------------------------------
# print('Development:',DEVELOPMENT)
# print('Debug:',DEBUG)
# print('Base_Dir:',BASE_DIR)
# print('Upload_Dir:',UPLOAD_DIR)
# print('Media_Root:',MEDIA_ROOT)
# print('Structure_files_dir:',MOL_IMG_DIR)
# print('DbBackup:',DBBACKUP_STORAGE_OPTIONS)

