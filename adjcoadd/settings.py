"""
Django settings for adjCOADD project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Development : Local/Work/<none>
DEVELOPMENT='Local'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT=os.path.join(BASE_DIR.parent, 'uploads')
MEDIA_URL=('uploads/')

# Define Structure Images folder path
if DEVELOPMENT=="Local":
    # structure_file_path = f"static/images/{file_name}.svg"
    STRUCTURE_FILES_DIR=os.path.join(BASE_DIR, 'static/images')
   
else:
    Base_dir = Path(__file__).resolve().parent.parent.parent
    STRUCTURE_FILES_DIR=os.path.abspath(os.path.join(Base_dir, 'static/images'))
    # structure_file_path=os.path.join(FILES_DIR, f"{file_name}.svg")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ["SECRET_KEY"]
SECRET_KEY = 'django-insecure-_fzrv(t#j+r4y)7s$nm=v!qt=+!@vs(2-=z)ls(h^$ozyj!$g^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["0.0.0.0", "imb-coadd-work.imb.uq.edu.au", "localhost", "127.0.0.1"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',   
    'django_rdkit',
    'django_filters',
    "sequences.apps.SequencesConfig",
    "django.contrib.postgres",
    # "psqlextra",
    'apputil.apps.ApputilConfig',
    'dorganism.apps.DorganismConfig',
    'ddrug.apps.DdrugConfig',
    'dscreen',
    'dcollab',
    'dgene',
    'rest_framework',
    'rest_framework.authtoken',
    'formtools',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'USER_ID_FIELD': 'username',  # Update this line to use the 'username' field as the user identifier
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apputil.clear_session_middleware.ClearSessionMiddleware',
]

ROOT_URLCONF = 'adjcoadd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR/'templates',
        #    BASE_DIR/,
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'adjcoadd.wsgi.application'
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
import psycopg2.extensions

if DEVELOPMENT:
    if DEVELOPMENT == 'Local':
        HOST_NAME = 'Localhost'
        PG_ENGINE = 'django.db.backends.postgresql_psycopg2'
    elif DEVELOPMENT == 'Work':
        HOST_NAME = 'imb-coadd-work.imb.uq.edu.au'
        PG_ENGINE = 'psqlextra.backend'
else:
    HOST_NAME = 'imb-coadd-work.imb.uq.edu.au'
    PG_ENGINE = 'psqlextra.backend'


DATABASES = {
    'default': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=apputil,dorganism,public', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD':'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    },
    'dorganism': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dorganism,apputil', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD': 'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    },
    'ddrug': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=ddrug,dscreen,dorganism,apputil,public', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD': 'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    },
    'dscreen': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dscreen,apputil,public', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD': 'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    },
    'dgene': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dgene,dorganism,apputil,public', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD': 'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    },
    'dcollab': {
        "ENGINE": PG_ENGINE,
        'OPTIONS':{'options': '-c search_path=dcollab,apputil,public', 'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,},
        'NAME': 'orgdb',
        'USER': 'orgdb', #os.environ.get('db_user'),
        'PASSWORD': 'orgdb',
        'HOST': HOST_NAME,
        'PORT': '5432',
    }
}

DATABASE_ROUTERS = ['adjcoadd.routers.DatabaseRouter',]

# Configure the test database
import sys
if 'test' in sys.argv or 'test_coverage' in sys.argv:  # Covers regular testing and django-coverage
    DATABASES['ddrug']['OPTIONS'] = {
        'options': '-c search_path=ddrug,apputil'
    }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Australia/Brisbane'
USE_I18N = True
USE_TZ = True
DATE_FORMAT = "d-m-Y"
USE_L10N = False
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
STATICFILES_DIRS=[BASE_DIR/"static",]
STATIC_ROOT = BASE_DIR.parent / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

AUTH_USER_MODEL = 'apputil.ApplicationUser'
LOGOUT_REDIRECT_URL="/"
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, LDAPGroupQuery, PosixGroupType

#LDAP AUthen
AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend", 
    "django.contrib.auth.backends.ModelBackend",
    ]
AUTH_LDAP_SERVER_URI = "ldap://ldap.uq.edu.au"
AUTH_LDAP_BIND_DN = ""
AUTH_LDAP_BIND_PASSWORD = ""
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=people,o=The University of Queensland,c=au", ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

# Security Setting
# CSRF_COOKIE_SECURE=True
CSRF_TRUSTED_ORIGINS = ["http://imb-coadd-work.imb.uq.edu.au:8008", "http://www.imb-coadd-work.imb.uq.edu.au:8008"]
# CORS_REPLACE_HTTPS_REFERER      = True
# HOST_SCHEME                     = "https://"
# SECURE_PROXY_SSL_HEADER         = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT             = True
# SESSION_COOKIE_SECURE           = True
# CSRF_COOKIE_SECURE              = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS  = True
# SECURE_HSTS_SECONDS             = 1000000
# SECURE_FRAME_DENY               = True


# Django Session timeout setting
# INACTIVE_TIME= 120
# if DEVELOPMENT:
#     SESSION_COOKIE_AGE=3000
# else:
#     SESSION_COOKIE_AGE=3000
# SESSION_EXPIRE_SECONDS =  120   
# SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True   
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_IDLE_TIMEOUT = 120
SESSION_SAVE_EVERY_REQUEST=True

# RDKit Settings
DJANGO_RDKIT_MOL_SERIALIZATION = "TEXT"


# Logging files
LOG_PATH = os.path.join(BASE_DIR, 'applog')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(str(LOG_PATH), 'django_server.log'),
            'formatter': 'verbose',
        },
        'user': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(str(LOG_PATH), 'user.log'),
            # 'maxBytes': 1024 * 1024 * 10,
            # 'backupCount': 10,
            'formatter': 'verbose',
        },    
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 20, ## python logging levels: 10-'DEBUG', 40-'ERROR', 50-'CRITICAL', 30-'WARNING', 20-'INFO', 0-'Notset'
            'propagate': False,
        },
    
        'user_log': {
            'handlers': ['user'],
            'level': 'INFO',
        },
    },
}

X_FRAME_OPTIONS = 'ALLOWALL'

XS_SHARING_ALLOWED_METHODS = ['POST','GET','OPTIONS', 'PUT', 'DELETE']