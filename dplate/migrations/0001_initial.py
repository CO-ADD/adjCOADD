# Generated by Django 4.2.13 on 2024-07-01 03:09

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dscreen', '0002_remove_screen_run_run_owner_screen_run_assay_note_and_more'),
        ('apputil', '0004_alter_applicationuser_options'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Labware',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('labware_id', models.CharField(max_length=25, primary_key=True, serialize=False, verbose_name='Labware ID')),
                ('labware_name', models.CharField(blank=True, max_length=50, verbose_name='Labware Name')),
                ('plate_size', models.PositiveSmallIntegerField(blank=True, choices=[(24, 24), (48, 48), (96, 96), (384, 384), (1536, 1536)], default=0, verbose_name='Plate Size')),
                ('plate_type', models.CharField(blank=True, choices=[('Plate', 'Plate with Wells'), ('Rack', 'Rack with Tubes')], max_length=10, verbose_name='Plate Type')),
                ('plate_color', models.CharField(blank=True, choices=[('Clear', 'Clear'), ('Black', 'Black'), ('White', 'White')], max_length=10, verbose_name='Plate Type')),
                ('well_shape', models.CharField(choices=[('Flat', 'Flat'), ('Round', 'Round'), ('U-Shape', 'U-Shape'), ('V-Shape', 'V-Shape')], max_length=10, verbose_name='Shape')),
                ('well_bottom', models.CharField(blank=True, choices=[('Clear', 'Clear'), ('Black', 'Black'), ('White', 'White'), ('Barcode', 'Barcode')], max_length=10, verbose_name='Bottom')),
                ('working_volume', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=9, verbose_name='Working volume (uL)')),
                ('brand', models.CharField(blank=True, max_length=25, verbose_name='Brand')),
                ('model', models.CharField(blank=True, max_length=25, verbose_name='Model')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('plate_material', models.ForeignKey(blank=True, db_column='material', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_material', to='apputil.dictionary', verbose_name='Material')),
            ],
            options={
                'db_table': 'labware',
                'ordering': ['labware_id'],
            },
        ),
        migrations.CreateModel(
            name='TestPlate',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('plate_id', models.CharField(max_length=25, primary_key=True, serialize=False, verbose_name='Plate ID')),
                ('motherplate_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=25, null=True), blank=True, null=True, size=2, verbose_name='Mother Plates')),
                ('prep_date', models.DateField(blank=True, null=True, verbose_name='Prep Date')),
                ('plating', models.CharField(blank=True, max_length=10, verbose_name='Plating by')),
                ('assay_id', models.CharField(blank=True, max_length=25, verbose_name='Assay ID')),
                ('test_date', models.DateField(blank=True, null=True, verbose_name='Test Date')),
                ('test_media', models.CharField(blank=True, max_length=50, verbose_name='Media')),
                ('test_strain', models.CharField(blank=True, max_length=15, verbose_name='Strain')),
                ('test_dye', models.CharField(blank=True, max_length=25, verbose_name='Dye')),
                ('test_addition', models.CharField(blank=True, max_length=25, verbose_name='Addition')),
                ('test_volume', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Volume (uL)')),
                ('test_processing', models.CharField(blank=True, max_length=25, verbose_name='Processing')),
                ('test_issues', models.CharField(blank=True, max_length=100, verbose_name='Issue')),
                ('reader', models.CharField(blank=True, max_length=50, verbose_name='Reader')),
                ('n_reads', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='#Reads')),
                ('readout_type', models.CharField(blank=True, max_length=25, verbose_name='Readout Type')),
                ('experiment', models.CharField(blank=True, max_length=80, verbose_name='Experiment')),
                ('protocol', models.CharField(blank=True, max_length=80, verbose_name='Protocol')),
                ('input_file', models.CharField(blank=True, max_length=80, verbose_name='Input File')),
                ('test_operator', models.CharField(blank=True, max_length=100, verbose_name='Operator')),
                ('has_readout', models.BooleanField(default=False, verbose_name='Has Readout')),
                ('has_sample', models.BooleanField(default=False, verbose_name='Has Sample')),
                ('has_layout', models.BooleanField(default=False, verbose_name='Has Layout')),
                ('has_inhibition', models.BooleanField(default=False, verbose_name='Has Inhibition')),
                ('has_doseresponse', models.BooleanField(default=False, verbose_name='Has Doseresponse')),
                ('process_status', models.PositiveSmallIntegerField(default=0, verbose_name='Process Status')),
                ('control_layout', models.CharField(blank=True, max_length=25, verbose_name='Layout')),
                ('synergy_samples', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=2, verbose_name='Synergy Samples')),
                ('positive_control', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=7), size=4)),
                ('negative_control', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=7), size=4)),
                ('sample_stats', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=7), size=4)),
                ('edge_stats', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=7), size=2)),
                ('analysis_parameter', models.CharField(blank=True, max_length=100, verbose_name='Analysis')),
                ('zfactor', models.DecimalField(decimal_places=2, max_digits=7)),
                ('plate_qc', models.DecimalField(decimal_places=2, max_digits=7)),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('labware_id', models.ForeignKey(blank=True, db_column='labware_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_labwareid', to='dplate.labware', verbose_name='Labware ID')),
                ('plate_quality', models.ForeignKey(blank=True, db_column='plate_quality', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_platequality', to='apputil.dictionary', verbose_name='Plate Quality')),
                ('result_type', models.ForeignKey(blank=True, db_column='result_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_resulttype', to='apputil.dictionary', verbose_name='Result Type')),
                ('run_id', models.ForeignKey(blank=True, db_column='run_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_runid', to='dscreen.screen_run', verbose_name='Run ID')),
            ],
            options={
                'db_table': 'testplate',
                'ordering': ['run_id', 'plate_id'],
            },
        ),
        migrations.CreateModel(
            name='TestWell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('well_id', models.CharField(max_length=5, verbose_name='Well ID')),
                ('n_samples', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='#Samples')),
                ('samplebatch_id', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), size=4)),
                ('analysis_set', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=4)),
                ('sample_concs', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=4, max_digits=12), size=4)),
                ('conc_units', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=4)),
                ('conc_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=4)),
                ('solvent', models.CharField(max_length=25)),
                ('solvent_conc', models.DecimalField(decimal_places=4, max_digits=12)),
                ('is_control', models.BooleanField(default=False, verbose_name='is Control')),
                ('is_poscontrol', models.BooleanField(default=False, verbose_name='is PosCtrl')),
                ('is_negcontrol', models.BooleanField(default=False, verbose_name='is NegCtrl')),
                ('is_sample', models.BooleanField(default=False, verbose_name='is Sample')),
                ('is_skip', models.BooleanField(default=False, verbose_name='is Skip')),
                ('is_valid', models.BooleanField(default=False, verbose_name='is Valid')),
                ('readouts', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=4, max_digits=12), size=4)),
                ('readout_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=5), size=4)),
                ('inhibition', models.DecimalField(decimal_places=2, max_digits=7)),
                ('zscore', models.DecimalField(decimal_places=2, max_digits=7)),
                ('mscore', models.DecimalField(decimal_places=2, max_digits=7)),
                ('bscore', models.DecimalField(decimal_places=2, max_digits=7)),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('plate_id', models.ForeignKey(blank=True, db_column='plate_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_plateid', to='dplate.testplate', verbose_name='Plate ID')),
                ('solvent_conc_unit', models.ForeignKey(blank=True, db_column='solvent_conc_unit', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_solvconcunit', to='apputil.dictionary', verbose_name='Conc Unit')),
            ],
            options={
                'db_table': 'testwell',
                'ordering': ['plate_id', 'well_id'],
                'indexes': [models.Index(fields=['plate_id', 'well_id'], name='testwell_tptw_idx'), models.Index(fields=['samplebatch_id'], name='testwell_smpid_idx'), models.Index(fields=['n_samples'], name='testwell_nsmp_idx'), models.Index(fields=['is_control', 'is_poscontrol', 'is_negcontrol', 'is_sample'], name='testwell_is_idx'), models.Index(fields=['is_skip', 'is_valid'], name='testwell_skip_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['labware_id'], name='testplate_labw_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['result_type'], name='testplate_rest_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['assay_id'], name='testplate_ass_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['run_id'], name='testplate_run_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['readout_type'], name='testplate_read_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['process_status'], name='testplate_proc_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['plate_qc'], name='testplate_qc_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['plate_quality'], name='testplate_pq_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['has_readout', 'has_sample', 'has_layout', 'has_inhibition', 'has_doseresponse'], name='testplate_has_idx'),
        ),
        migrations.AddIndex(
            model_name='testplate',
            index=models.Index(fields=['test_media', 'test_strain', 'test_dye', 'test_addition'], name='testplate_test_idx'),
        ),
    ]
