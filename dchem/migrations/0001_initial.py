# Generated by Django 4.2.13 on 2024-07-02 07:06

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django_rdkit.models.fields
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apputil', '0004_alter_applicationuser_options'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Chem_Structure',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('structure_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Structure ID')),
                ('structure_code', models.CharField(blank=True, max_length=15, verbose_name='Structure Code')),
                ('structure_name', models.CharField(blank=True, max_length=50, verbose_name='Structure Name')),
                ('parent_structure_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=15, null=True), blank=True, null=True, size=4, verbose_name='Panel')),
                ('atom_classes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=15, null=True), blank=True, null=True, size=4, verbose_name='Atom Classes')),
                ('smol', django_rdkit.models.fields.MolField(verbose_name='MOL')),
                ('tfp2', django_rdkit.models.fields.BfpField(verbose_name='Topological-Torsion FP')),
                ('ffp2', django_rdkit.models.fields.BfpField(verbose_name='Feature Morgan FP (FCFP)')),
                ('mfp2', django_rdkit.models.fields.BfpField(verbose_name='Morgan FP (ECFP)')),
                ('nfrag', models.PositiveSmallIntegerField(blank=True, default=1, verbose_name='nFrag')),
                ('charge', models.DecimalField(blank=True, decimal_places=2, max_digits=10, verbose_name='Charge')),
                ('inchikey', models.CharField(blank=True, max_length=50, verbose_name='InChiKey')),
                ('mf', models.CharField(blank=True, max_length=500, verbose_name='MF')),
                ('mw', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=12, verbose_name='MW')),
                ('natoms', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nAtoms')),
                ('hba', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='HBond Acc')),
                ('hbd', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='HBond Don')),
                ('logp', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9, verbose_name='logP')),
                ('tpsa', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=12, verbose_name='tPSA')),
                ('fractioncsp3', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9, verbose_name='Sp3')),
                ('nrotbonds', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nRotBond')),
                ('nrings', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nRings')),
                ('narorings', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nAroRings')),
                ('nhetarorings', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nHetAroRings')),
                ('nhetaliphrings', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='nHetAliphRings')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('structure_type', models.ForeignKey(blank=True, db_column='structure_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_structuretype', to='apputil.dictionary', verbose_name='Type')),
            ],
            options={
                'db_table': 'chem_structure',
                'ordering': ['structure_name'],
                'indexes': [models.Index(fields=['structure_name'], name='cstruct_dname_idx'), models.Index(fields=['structure_code'], name='cstruct_dcode_idx'), models.Index(fields=['inchikey'], name='cstruct_inchi_idx'), models.Index(fields=['mf'], name='cstruct_mf_idx'), models.Index(fields=['mw'], name='cstruct_mw_idx'), models.Index(fields=['natoms'], name='cstruct_natoms_idx'), models.Index(fields=['nfrag'], name='cstruct_nfrag_idx'), models.Index(fields=['charge'], name='cstruct_charge_idx'), django.contrib.postgres.indexes.GistIndex(fields=['smol'], name='cstruct_smol_idx'), django.contrib.postgres.indexes.GistIndex(fields=['ffp2'], name='cstruct_ffp2_idx'), django.contrib.postgres.indexes.GistIndex(fields=['mfp2'], name='cstruct_mfp2_idx'), django.contrib.postgres.indexes.GistIndex(fields=['tfp2'], name='cstruct_tfp2_idx')],
            },
        ),
        migrations.CreateModel(
            name='Chem_Salt',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('salt_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Salt ID')),
                ('salt_code', models.CharField(blank=True, max_length=15, verbose_name='Salt Code')),
                ('salt_name', models.CharField(blank=True, max_length=50, verbose_name='Salt Name')),
                ('smiles', models.CharField(blank=True, max_length=500, verbose_name='Smiles')),
                ('smol', django_rdkit.models.fields.MolField(verbose_name='MOL')),
                ('mf', models.CharField(blank=True, max_length=500, verbose_name='MF')),
                ('mw', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=12, verbose_name='MW')),
                ('natoms', models.IntegerField(blank=True, default=0, verbose_name='nAtoms')),
                ('charge', models.DecimalField(blank=True, decimal_places=2, max_digits=10, verbose_name='Charge')),
                ('h_equiv', models.IntegerField(blank=True, default=0, verbose_name='H Equivalent')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('salt_type', models.ForeignKey(blank=True, db_column='salt_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_salttype', to='apputil.dictionary', verbose_name='Type')),
            ],
            options={
                'db_table': 'chem_salt',
                'ordering': ['salt_code'],
                'indexes': [models.Index(fields=['salt_code'], name='csalt_dcode_idx'), models.Index(fields=['salt_type'], name='csalt_type_idx'), django.contrib.postgres.indexes.GistIndex(fields=['smol'], name='csalt_smol_idx')],
            },
        ),
        migrations.CreateModel(
            name='Chem_Reaction',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('reaction_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Reaction ID')),
                ('reaction_code', models.CharField(blank=True, max_length=15, verbose_name='Reaction Code')),
                ('reaction_name', models.CharField(blank=True, max_length=50, verbose_name='Reaction Name')),
                ('smarts', models.CharField(blank=True, max_length=10125, verbose_name='Smarts')),
                ('run_status', models.IntegerField(blank=True, default=0, verbose_name='RunStatus')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('reaction_type', models.ForeignKey(blank=True, db_column='reaction_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_reactiontype', to='apputil.dictionary', verbose_name='Type')),
            ],
            options={
                'db_table': 'chem_reaction',
                'ordering': ['reaction_code'],
                'indexes': [models.Index(fields=['reaction_code'], name='creact_dcode_idx'), models.Index(fields=['reaction_type'], name='creact_type_idx')],
            },
        ),
        migrations.CreateModel(
            name='Chem_Alert',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('alert_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Alert ID')),
                ('alert_code', models.CharField(blank=True, max_length=15, verbose_name='Alert Code')),
                ('alert_name', models.CharField(blank=True, max_length=50, verbose_name='Alert Name')),
                ('smarts', models.CharField(blank=True, max_length=10125, verbose_name='Smarts')),
                ('allow_min', models.IntegerField(blank=True, default=0, verbose_name='nAtoms')),
                ('allow_ax', models.IntegerField(blank=True, default=0, verbose_name='nAtoms')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('alert_type', models.ForeignKey(blank=True, db_column='alert_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_alerttype', to='apputil.dictionary', verbose_name='Type')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'db_table': 'chem_alert',
                'ordering': ['alert_code'],
                'indexes': [models.Index(fields=['alert_code'], name='calert_dcode_idx'), models.Index(fields=['alert_type'], name='calert_type_idx')],
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='chem_structure',
            trigger=pgtrigger.compiler.Trigger(name='trigfunc_chemstruct_biu', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                                New.mfp2 := morganbv_fp(NEW.sMol);\n                                New.ffp2 := featmorganbv_fp(NEW.sMol);\n                                New.tfp2 := torsionbv_fp(NEW.sMol);\n                                New.inchikey := mol_inchikey(NEW.sMol);\n                                New.mw := mol_amw(NEW.sMol);\n                                New.mf := mol_formula(NEW.sMol);\n                                New.natoms := mol_numheavyatoms(NEW.sMol);\n                                New.logp := mol_logp(NEW.sMol);\n                                New.tpsa := mol_tpsa(NEW.sMol);\n                                New.nrotbonds = mol_numrotatablebonds(NEW.sMol);\n                                New.fractioncsp3 = mol_fractioncsp3(NEW.sMol);\n                                New.hba = mol_hba(NEW.sMol);\n                                New.hbd = mol_hbd(NEW.sMol);\n                                New.nrings = mol_numrings(NEW.sMol);\n                                New.narorings = mol_numaromaticrings(NEW.sMol);\n                                New.nhetarorings = mol_numaromaticheterocycles(NEW.sMol);\n                                New.nhetaliphrings = mol_numaliphaticheterocycles(NEW.sMol);\n                                RETURN NEW;\n                            ', hash='e30c0e38ebd9235c4f2ae682606581dc9c5b524f', operation='INSERT OR UPDATE', pgid='pgtrigger_trigfunc_chemstruct_biu_4ae21', table='chem_structure', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='chem_salt',
            trigger=pgtrigger.compiler.Trigger(name='trigfunc_chemsalt_biu', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                                New.mw := mol_amw(NEW.sMol);\n                                New.mf := mol_formula(NEW.sMol);\n                                New.natoms := mol_numheavyatoms(NEW.sMol);\n                                RETURN NEW;\n                            ', hash='ec9adf6c060a48790733a2a359693980f65c4952', operation='INSERT OR UPDATE', pgid='pgtrigger_trigfunc_chemsalt_biu_533df', table='chem_salt', when='BEFORE')),
        ),
    ]
