# Generated by Django 4.2.2 on 2024-07-22 03:34

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apputil', '0004_alter_applicationuser_options'),
        ('dchem', '__first__'),
        ('dcollab', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('library_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Library ID')),
                ('library_name', models.CharField(blank=True, max_length=150, verbose_name='Name')),
                ('library_version', models.CharField(blank=True, max_length=15, verbose_name='Version')),
                ('source', models.CharField(blank=True, max_length=250, verbose_name='Source')),
                ('source_code', models.CharField(blank=True, max_length=120, verbose_name='Source Code')),
                ('reference', models.CharField(blank=True, max_length=150, verbose_name='Reference')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('library_class', models.ForeignKey(blank=True, db_column='library_class', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_library_class', to='apputil.dictionary', verbose_name='Class')),
            ],
            options={
                'db_table': 'library',
                'ordering': ['library_id'],
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('sample_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Sample ID')),
                ('batch_id', models.CharField(blank=True, default='00', max_length=12, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', 'Only alphanumeric characters are allowed.')], verbose_name='Batch ID')),
                ('batch_notes', models.CharField(blank=True, max_length=500, verbose_name='Batch Notes')),
                ('sample_source', models.CharField(choices=[('COADD', 'COADD Sample'), ('ABASE', 'ResearchGrp Sample'), ('LIBRARY', 'Library Sample')], max_length=25, verbose_name='Sample Source')),
                ('sample_code', models.CharField(blank=True, max_length=150, verbose_name='Sample Code')),
                ('previous_ids', models.CharField(blank=True, max_length=100, verbose_name='Previous IDs')),
                ('structure_type', models.CharField(blank=True, max_length=400, verbose_name='Type')),
                ('salt_code', models.CharField(blank=True, max_length=120, verbose_name='Salts')),
                ('smiles_extra', models.CharField(blank=True, max_length=256, verbose_name='Smiles Salt')),
                ('mw_extra', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name='MW Salt')),
                ('full_mw', models.FloatField(blank=True, default=0, verbose_name='Full MW')),
                ('full_mf', models.CharField(blank=True, max_length=100, verbose_name='Full MF')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('structure_id', models.ForeignKey(blank=True, db_column='structure_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_structure_id', to='dchem.chem_structure', verbose_name='Structure ID')),
            ],
            options={
                'db_table': 'sample',
                'ordering': ['sample_id'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('project_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Project ID')),
                ('project_name', models.CharField(blank=True, max_length=150, verbose_name='Name')),
                ('cpoz_id', models.CharField(blank=True, max_length=50, verbose_name='CpOz ID')),
                ('process_status', models.CharField(blank=True, max_length=250, verbose_name='Process')),
                ('project_comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('provided_comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('received', models.DateField(blank=True, null=True, verbose_name='Received')),
                ('completed', models.DateField(blank=True, null=True, verbose_name='Completed')),
                ('stock_container', models.CharField(blank=True, max_length=120, verbose_name='Stock Container')),
                ('stock_conc', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Stock Conc')),
                ('stock_comment', models.CharField(blank=True, max_length=150, verbose_name='Stock Comment')),
                ('stock_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50, null=True), blank=True, null=True, size=20, verbose_name='Stock Status')),
                ('compound_comment', models.CharField(blank=True, max_length=150, verbose_name='Compound Comment')),
                ('compound_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50, null=True), blank=True, null=True, size=20, verbose_name='Compound Status')),
                ('screen_comment', models.CharField(blank=True, max_length=150, verbose_name='Screen Comment')),
                ('screen_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=20, null=True), blank=True, null=True, size=20, verbose_name='Screen Status')),
                ('data_comment', models.CharField(blank=True, max_length=150, verbose_name='Data Comment')),
                ('data_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=20, null=True), blank=True, null=True, size=20, verbose_name='Data Status')),
                ('report_comment', models.CharField(blank=True, max_length=150, verbose_name='Report Comment')),
                ('report_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=20, null=True), blank=True, null=True, size=20, verbose_name='Report Status')),
                ('owner_user', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=25, null=True), blank=True, null=True, size=10, verbose_name='User')),
                ('ora_project_id', models.CharField(max_length=15, unique=True, verbose_name='Old Project ID')),
                ('ora_group_id', models.CharField(blank=True, max_length=10, verbose_name='Old GroupID')),
                ('ora_contact_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=10, null=True), blank=True, null=True, size=2, verbose_name='Old ContactsUser')),
                ('ora_organisation', models.CharField(blank=True, max_length=100, verbose_name='Old Organisation')),
                ('ora_psreport_date', models.DateField(blank=True, editable=False, null=True, verbose_name='PS Report')),
                ('ora_hcreport_date', models.DateField(blank=True, editable=False, null=True, verbose_name='HC Report')),
                ('ora_hvreport_date', models.DateField(blank=True, editable=False, null=True, verbose_name='HV Report')),
                ('source', models.CharField(blank=True, max_length=250, verbose_name='Source')),
                ('source_code', models.CharField(blank=True, max_length=120, verbose_name='Source Code')),
                ('reference', models.CharField(blank=True, max_length=150, verbose_name='Reference')),
                ('pub_name', models.CharField(blank=True, max_length=150, verbose_name='Public Name')),
                ('pub_status', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=20, null=True), blank=True, null=True, size=20, verbose_name='Public Status')),
                ('pub_date', models.DateField(blank=True, editable=False, null=True, verbose_name='Published')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('owner_group', models.ForeignKey(blank=True, db_column='owner_group', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_owner_group', to='dcollab.collab_group', verbose_name='Group')),
                ('project_status', models.ForeignKey(blank=True, db_column='project_status', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_project_status', to='apputil.dictionary', verbose_name='Project Status')),
                ('project_type', models.ForeignKey(blank=True, db_column='project_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_project_type', to='apputil.dictionary', verbose_name='Type')),
                ('provided_container', models.ForeignKey(blank=True, db_column='provided_container', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_provided_container', to='apputil.dictionary', verbose_name='Provided Container')),
                ('stock_conc_unit', models.ForeignKey(blank=True, db_column='stock_conc_unit', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_stock_conc_unit', to='apputil.dictionary', verbose_name='Stock Conc Unit')),
            ],
            options={
                'db_table': 'project',
                'ordering': ['project_id'],
            },
        ),
        migrations.CreateModel(
            name='Library_Compound',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('compound_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Compound ID')),
                ('compound_code', models.CharField(blank=True, max_length=50, verbose_name='Code')),
                ('compound_name', models.CharField(blank=True, max_length=250, verbose_name='Name')),
                ('compound_desc', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('reg_smiles', models.CharField(blank=True, max_length=2048, verbose_name='Reg Smiles')),
                ('std_status', models.CharField(blank=True, max_length=10, verbose_name='Std Status')),
                ('std_process', models.CharField(blank=True, max_length=120, verbose_name='Std Process')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('compound_type', models.ForeignKey(blank=True, db_column='compound_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_compound_type', to='apputil.dictionary', verbose_name='Type')),
                ('library_id', models.ForeignKey(blank=True, db_column='library_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_library_id', to='dsample.library', verbose_name='Library ID')),
                ('sample_id', models.ForeignKey(blank=True, db_column='sample_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_sample_id', to='dsample.sample', verbose_name='Sample ID')),
            ],
            options={
                'db_table': 'library_compound',
                'ordering': ['compound_id'],
            },
        ),
        migrations.CreateModel(
            name='Convert_ProjectID',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('ora_project_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Old Project ID')),
                ('project_id', models.CharField(max_length=15, verbose_name='Project ID')),
                ('project_name', models.CharField(blank=True, max_length=50, verbose_name='Project Name')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'db_table': 'convert_projectid',
                'ordering': ['ora_project_id'],
            },
        ),
        migrations.CreateModel(
            name='Convert_CompoundID',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('ora_compound_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Old Compound ID')),
                ('compound_id', models.CharField(max_length=15, verbose_name='Compound ID')),
                ('compound_code', models.CharField(blank=True, max_length=120, verbose_name='Code')),
                ('compound_name', models.CharField(blank=True, max_length=120, verbose_name='Name')),
                ('project_id', models.CharField(max_length=15, verbose_name='Project ID')),
                ('sample_type', models.CharField(max_length=10, verbose_name='Project ID')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'db_table': 'convert_compoundid',
                'ordering': ['ora_compound_id'],
            },
        ),
        migrations.CreateModel(
            name='COADD_Compound',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('compound_id', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Compound ID')),
                ('compound_code', models.CharField(blank=True, max_length=120, verbose_name='Code')),
                ('compound_name', models.CharField(blank=True, max_length=120, verbose_name='Name')),
                ('compound_desc', models.CharField(blank=True, max_length=150, verbose_name='Comment')),
                ('ora_compound_id', models.CharField(blank=True, max_length=15, verbose_name='Old Compound ID')),
                ('ora_project_id', models.CharField(blank=True, max_length=15, verbose_name='Old Project ID')),
                ('ora_compound_type', models.CharField(blank=True, max_length=150, verbose_name='Old Compound Type')),
                ('reg_smiles', models.CharField(blank=True, max_length=2048, verbose_name='Reg Smiles')),
                ('reg_mw', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name='Reg MW')),
                ('reg_mf', models.CharField(blank=True, max_length=100, verbose_name='Reg MF')),
                ('reg_structure', models.CharField(blank=True, max_length=2048, verbose_name='Reg Structure')),
                ('reg_amount', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Reg Amount')),
                ('reg_volume', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Reg Volume')),
                ('reg_conc', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Reg Conc')),
                ('reg_solvent', models.CharField(blank=True, max_length=100, verbose_name='Reg Solvent')),
                ('prep_date', models.DateField(blank=True, null=True, verbose_name='Prepared')),
                ('std_status', models.CharField(blank=True, max_length=10, verbose_name='Std Status')),
                ('std_process', models.CharField(blank=True, max_length=120, verbose_name='Std Process')),
                ('std_issues', models.CharField(blank=True, max_length=250, verbose_name='Std Issues')),
                ('std_smiles', models.CharField(blank=True, max_length=2048, verbose_name='Std Smiles')),
                ('std_nfrag', models.SmallIntegerField(default=0, verbose_name='Std nFrag')),
                ('std_salt', models.CharField(blank=True, max_length=100, verbose_name='Std Salt')),
                ('std_ion', models.CharField(blank=True, max_length=100, verbose_name='Std Ion')),
                ('std_solvent', models.CharField(blank=True, max_length=100, verbose_name='Std Solvent')),
                ('std_metal', models.CharField(blank=True, max_length=100, verbose_name='Std Metal')),
                ('std_structure_type', models.CharField(blank=True, max_length=400, verbose_name='Std Type')),
                ('std_smiles_extra', models.CharField(blank=True, max_length=256, verbose_name='Std Smiles Extra')),
                ('std_mw', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name='Std MW')),
                ('std_mw_extra', models.DecimalField(decimal_places=3, default=0, max_digits=12, verbose_name='Std MW Extra')),
                ('std_mf', models.CharField(blank=True, max_length=100, verbose_name='Std Total MF')),
                ('cpoz_sn', models.CharField(blank=True, max_length=25, verbose_name='CpOz SN')),
                ('cpoz_id', models.CharField(blank=True, max_length=25, verbose_name='CpOz Lib ID')),
                ('coadd_id', models.CharField(blank=True, max_length=25, verbose_name='CO-ADD ID')),
                ('chembl_id', models.CharField(blank=True, max_length=25, verbose_name='ChEMBL ID')),
                ('spark_id', models.CharField(blank=True, max_length=25, verbose_name='SPARK ID')),
                ('pub_status', models.CharField(blank=True, max_length=10, verbose_name='Pub Status')),
                ('pub_date', models.DateField(blank=True, editable=False, null=True, verbose_name='Published')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_acreated_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_adeleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_aupdated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('compound_source', models.ForeignKey(blank=True, db_column='compound_source', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_compound_source', to='apputil.dictionary', verbose_name='Type')),
                ('compound_type', models.ForeignKey(blank=True, db_column='compound_type', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_compound_type', to='apputil.dictionary', verbose_name='Type')),
                ('project_id', models.ForeignKey(blank=True, db_column='project_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_project_id', to='dsample.project', verbose_name='Project ID')),
                ('reg_amount_unit', models.ForeignKey(blank=True, db_column='reg_amount_unit', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_reg_amount_unit', to='apputil.dictionary', verbose_name='Reg Amount Unit')),
                ('reg_conc_unit', models.ForeignKey(blank=True, db_column='reg_conc_unit', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_reg_conc_unit', to='apputil.dictionary', verbose_name='Reg Conc Unit')),
                ('reg_volume_unit', models.ForeignKey(blank=True, db_column='reg_volume_unit', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_reg_volume_unit', to='apputil.dictionary', verbose_name='Reg Volume Unit')),
                ('sample_id', models.ForeignKey(blank=True, db_column='sample_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='%(class)s_sample_id', to='dsample.sample', verbose_name='Sample ID')),
            ],
            options={
                'db_table': 'coadd_compound',
                'ordering': ['compound_id'],
            },
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['sample_source'], name='sample_src_idx'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['sample_code'], name='sample_code_idx'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['structure_type'], name='sample_stype_idx'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['full_mw'], name='sample_fmw_idx'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['salt_code'], name='sample_salt_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['project_name'], name='prj_pname_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['ora_project_id'], name='prj_opid_idx'),
        ),
        migrations.AddIndex(
            model_name='library_compound',
            index=models.Index(fields=['compound_code'], name='lcmp_code_idx'),
        ),
        migrations.AddIndex(
            model_name='library_compound',
            index=models.Index(fields=['compound_type'], name='lcmp_type_idx'),
        ),
        migrations.AddIndex(
            model_name='library_compound',
            index=models.Index(fields=['library_id'], name='lcmp_lid_idx'),
        ),
        migrations.AddIndex(
            model_name='library_compound',
            index=models.Index(fields=['sample_id'], name='lcmp_sid_idx'),
        ),
        migrations.AddIndex(
            model_name='library_compound',
            index=models.Index(fields=['std_status'], name='lcmp_sstat_idx'),
        ),
        migrations.AddIndex(
            model_name='library',
            index=models.Index(fields=['library_name'], name='lib_lname_idx'),
        ),
        migrations.AddIndex(
            model_name='library',
            index=models.Index(fields=['library_class'], name='lib_lclass_idx'),
        ),
        migrations.AddIndex(
            model_name='convert_projectid',
            index=models.Index(fields=['project_id'], name='wprj_pid_idx'),
        ),
        migrations.AddIndex(
            model_name='convert_projectid',
            index=models.Index(fields=['project_name'], name='wprj_pname_idx'),
        ),
        migrations.AddIndex(
            model_name='convert_compoundid',
            index=models.Index(fields=['compound_id'], name='wcmpd_cid_idx'),
        ),
        migrations.AddIndex(
            model_name='convert_compoundid',
            index=models.Index(fields=['compound_code'], name='wcmpd_ccode_idx'),
        ),
        migrations.AddIndex(
            model_name='convert_compoundid',
            index=models.Index(fields=['sample_type'], name='wcmpd_stype_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['compound_name'], name='coadd_name_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['compound_code'], name='coadd_code_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['compound_type'], name='coadd_type_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['project_id'], name='coadd_pid_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['sample_id'], name='coadd_sid_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['ora_compound_id'], name='coadd_ocid_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['ora_project_id'], name='coadd_opid_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['std_status'], name='coadd_sstat_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['std_nfrag'], name='coadd_snfrag_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['std_structure_type'], name='coadd_sstyp_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['std_salt'], name='coadd_ssalt_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['std_metal'], name='coadd_smetal_idx'),
        ),
        migrations.AddIndex(
            model_name='coadd_compound',
            index=models.Index(fields=['pub_status'], name='coadd_pst_idx'),
        ),
    ]
