# Generated by Django 3.2.6 on 2022-11-16 11:12

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dorganism', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted at')),
                ('Organism_ID', models.CharField(blank=True, max_length=15, primary_key=True, serialize=False, unique=True, verbose_name='Organism ID')),
                ('Strain_ID', models.CharField(db_index=True, max_length=50, verbose_name='Strain ID')),
                ('Strain_OtherID', models.CharField(blank=True, max_length=150, null=True, verbose_name='Strain OtherID')),
                ('Strain_Code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Strain Code')),
                ('Strain_Notes', models.CharField(blank=True, max_length=250, null=True, verbose_name='Strain Notes')),
                ('Strain_Origin', models.CharField(blank=True, max_length=200, null=True, verbose_name='Origin')),
                ('Strain_Property', models.CharField(blank=True, max_length=200, null=True, verbose_name='Property')),
                ('Strain_Type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Type')),
                ('Strain_Panel', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Panel')),
                ('Strain_Tissue', models.CharField(blank=True, max_length=250, null=True, verbose_name='Strain Tissue')),
                ('Biologist', models.CharField(blank=True, max_length=50, null=True, verbose_name='Biologist')),
                ('Sequence', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sequence')),
                ('Sequence_Link', models.CharField(blank=True, max_length=500, null=True, verbose_name='Sequence Link')),
                ('Tax_ID', models.IntegerField(default=0, null=True, verbose_name='NCBI Tax ID')),
                ('Risk_Group', models.CharField(blank=True, max_length=50, null=True, verbose_name='Risk Group')),
                ('Pathogen_Group', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pathogen')),
                ('Import_Permit', models.CharField(blank=True, max_length=500, null=True, verbose_name='Import Permit')),
                ('Bio_Approval', models.CharField(blank=True, max_length=200, null=True, verbose_name='Biological Approval')),
                ('Special_Precaution', models.CharField(blank=True, max_length=500, null=True, verbose_name='Special Precaution')),
                ('Lab_Restriction', models.CharField(blank=True, max_length=500, null=True, verbose_name='Lab')),
                ('MTA_Status', models.CharField(blank=True, max_length=150, null=True, verbose_name='MTA Status')),
                ('MTA_Document', models.CharField(blank=True, max_length=150, null=True, verbose_name='MTA Document')),
                ('Oxygen_Pref', models.CharField(blank=True, max_length=250, null=True, verbose_name='Oxygen')),
                ('Atmosphere_Pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Atmosphere')),
                ('Nutrient_Pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Nutirent')),
                ('Biofilm_Pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Biofilm')),
                ('Organism_Name', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.taxonomy', verbose_name='Organism Name')),
                ('acreated_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_requests_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_requests_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_requests_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'ordering': ['Organism_Name'],
            },
        ),
        migrations.CreateModel(
            name='Organism_Batch',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted at')),
                ('OrgBatch_ID', models.IntegerField(primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='OrgBatch ID')),
                ('Batch_No', models.IntegerField(verbose_name='Batch No')),
                ('Batch_Notes', models.CharField(blank=True, max_length=500, null=True, verbose_name='Batch Notes')),
                ('QC_Status', models.CharField(blank=True, max_length=10, null=True, verbose_name='QC Notes')),
                ('QC_Record', models.CharField(blank=True, max_length=10, null=True, verbose_name='QC Records')),
                ('Supplier', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier')),
                ('Supplier_Code', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier Code')),
                ('Supplier_PO', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier PO')),
                ('Stock_Date', models.DateField(blank=True, editable=False, null=True, verbose_name='Stock Date')),
                ('Stock_Level', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), editable=False, size=3, verbose_name='Stock Levels')),
                ('Biologist', models.CharField(blank=True, max_length=50, null=True, verbose_name='Biologist')),
                ('Organism_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism', verbose_name='Organism ID')),
                ('acreated_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_requests_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_requests_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_requests_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'ordering': ['OrgBatch_ID'],
            },
        ),
        migrations.CreateModel(
            name='Organism_Culture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted at')),
                ('Culture_Type', models.CharField(blank=True, max_length=120, null=True, verbose_name='Culture Type')),
                ('Media_Use', models.CharField(blank=True, max_length=120, null=True, verbose_name='Media Use')),
                ('Media', models.CharField(blank=True, max_length=120, null=True, verbose_name='Media')),
                ('Atmosphere', models.CharField(blank=True, max_length=120, null=True, verbose_name='Atmosphere')),
                ('Temperature', models.CharField(blank=True, max_length=25, null=True, verbose_name='Temperature')),
                ('Labware', models.CharField(blank=True, max_length=120, null=True, verbose_name='Labware')),
                ('Biologist', models.CharField(blank=True, max_length=50, null=True, verbose_name='Biologist')),
                ('Notes', models.CharField(blank=True, max_length=512, null=True, verbose_name='Media')),
                ('Organism_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism', verbose_name='Organism ID')),
                ('acreated_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_requests_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_requests_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_requests_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'ordering': ['Organism_ID', 'Culture_Type', 'Media_Use'],
            },
        ),
        migrations.CreateModel(
            name='OrgBatch_Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Deleted at')),
                ('Passage_No', models.IntegerField(verbose_name='Passage No')),
                ('Location_Freezer', models.CharField(blank=True, max_length=80, null=True, verbose_name='Freezer')),
                ('Location_Rack', models.CharField(blank=True, max_length=10, null=True, verbose_name='Rack')),
                ('Location_Column', models.CharField(blank=True, max_length=10, null=True, verbose_name='Column')),
                ('Location_Slot', models.CharField(blank=True, max_length=10, null=True, verbose_name='Slot')),
                ('Stock_Type', models.CharField(blank=True, max_length=20, null=True, verbose_name='Stock Type')),
                ('Stock_Date', models.DateField(blank=True, null=True, verbose_name='Stock Date')),
                ('N_Created', models.IntegerField(verbose_name='#Vials created')),
                ('N_Left', models.IntegerField(verbose_name='#Vials left')),
                ('Biologist', models.CharField(blank=True, max_length=50, null=True, verbose_name='Biologist')),
                ('OrgBatch_ID', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
                ('acreated_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_requests_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_requests_deleted', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_requests_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'ordering': ['OrgBatch_ID', 'Stock_Type'],
            },
        ),
        migrations.RenameModel(
            old_name='Genes',
            new_name='Gene',
        ),
        migrations.DeleteModel(
            name='Organisms',
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['Stock_Type'], name='orgbstock_stype_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['Location_Freezer'], name='orgbstock_freezer_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['Stock_Date'], name='orgbstock_stdate_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['N_Left'], name='orgbstock_nleft_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_culture',
            index=models.Index(fields=['Media_Use'], name='orgcult_media_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_culture',
            index=models.Index(fields=['Culture_Type'], name='orgcult_ctype_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['Organism_ID', 'Batch_No'], name='orgbatch_orgbatch_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['QC_Status'], name='orgbatch_qc_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['Supplier'], name='orgbatch_supp_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['Stock_Date'], name='orgbatch_sdate_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['Stock_Level'], name='orgbatch_slevel_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Strain_ID'], name='org_stid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Strain_OtherID'], name='org_stother_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Strain_Code'], name='org_stcode_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Strain_Type'], name='org_strainid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Strain_Panel'], name='org_stpanel_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['MTA_Status'], name='org_mta_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Tax_ID'], name='org_taxid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Risk_Group'], name='org_riskgrp_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['Pathogen_Group'], name='org_pathgrp_idx'),
        ),
    ]
