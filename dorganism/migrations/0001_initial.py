# Generated by Django 3.2.6 on 2022-11-29 04:47

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('apputil', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('organism_id', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True, verbose_name='Organism ID')),
                ('strain_id', models.CharField(db_index=True, max_length=50, verbose_name='Strain ID')),
                ('strain_otherids', models.CharField(blank=True, max_length=150, null=True, verbose_name='Strain OtherID')),
                ('strain_code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Strain Code')),
                ('strain_notes', models.CharField(blank=True, max_length=250, null=True, verbose_name='Strain Notes')),
                ('strain_origin', models.CharField(blank=True, max_length=200, null=True, verbose_name='Origin')),
                ('strain_property', models.CharField(blank=True, max_length=200, null=True, verbose_name='Property')),
                ('strain_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Type')),
                ('strain_panel', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), blank=True, null=True, size=20, verbose_name='Panel')),
                ('strain_tissue', models.CharField(blank=True, max_length=250, null=True, verbose_name='Strain Tissue')),
                ('sequence', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sequence')),
                ('sequence_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='Sequence Link')),
                ('tax_id', models.IntegerField(default=0, null=True, verbose_name='NCBI Tax ID')),
                ('risk_group', models.CharField(blank=True, max_length=50, null=True, verbose_name='Risk Group')),
                ('pathogen_group', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pathogen')),
                ('import_permit', models.CharField(blank=True, max_length=500, null=True, verbose_name='Import Permit')),
                ('bio_approval', models.CharField(blank=True, max_length=200, null=True, verbose_name='Biological Approval')),
                ('special_precaution', models.CharField(blank=True, max_length=500, null=True, verbose_name='Special Precaution')),
                ('lab_restriction', models.CharField(blank=True, max_length=500, null=True, verbose_name='Lab')),
                ('mta_status', models.CharField(blank=True, max_length=150, null=True, verbose_name='MTA Status')),
                ('mta_document', models.CharField(blank=True, max_length=150, null=True, verbose_name='MTA Document')),
                ('oxygen_pref', models.CharField(blank=True, max_length=250, null=True, verbose_name='Oxygen')),
                ('atmosphere_pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Atmosphere')),
                ('nutrient_pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Nutirent')),
                ('biofilm_pref', models.CharField(blank=True, max_length=500, null=True, verbose_name='Biofilm')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
            ],
            options={
                'db_table': 'organism',
                'ordering': ['organism_name'],
            },
        ),
        migrations.CreateModel(
            name='Organism_Batch',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('orgbatch_id', models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='OrgBatch ID')),
                ('batch_no', models.IntegerField(verbose_name='Batch No')),
                ('batch_notes', models.CharField(blank=True, max_length=500, null=True, verbose_name='Batch Notes')),
                ('qc_status', models.CharField(blank=True, max_length=10, null=True, verbose_name='QC Notes')),
                ('qc_record', models.CharField(blank=True, max_length=10, null=True, verbose_name='QC Records')),
                ('supplier', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier')),
                ('supplier_code', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier Code')),
                ('supplier_po', models.CharField(blank=True, max_length=120, null=True, verbose_name='Supplier PO')),
                ('stock_date', models.DateField(blank=True, editable=False, null=True, verbose_name='Stock Date')),
                ('stock_level', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=list, editable=False, null=True, size=3, verbose_name='Stock Levels')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_batch_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('organism_id', models.ForeignKey(db_column='organism_id', on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism', verbose_name='Organism ID')),
            ],
            options={
                'db_table': 'orgbatch',
                'ordering': ['orgbatch_id'],
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('organism_name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='Specie')),
                ('other_names', models.CharField(blank=True, max_length=100, null=True, verbose_name='Other Names')),
                ('code', models.CharField(blank=True, max_length=15, null=True, verbose_name='Code')),
                ('tax_id', models.IntegerField(blank=True, null=True, verbose_name='NCBI Tax ID')),
                ('parent_tax_id', models.IntegerField(blank=True, null=True, verbose_name='NCBI Parent Tax ID')),
                ('tax_rank', models.CharField(blank=True, max_length=50, null=True, verbose_name='Taxonomy Rank')),
                ('lineage', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=25, null=True), null=True, size=25)),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='taxonomy_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='taxonomy_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='taxonomy_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('division', models.ForeignKey(blank=True, db_column='division', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='Division', to='apputil.dictionary', verbose_name='Division')),
                ('org_class', models.ForeignKey(blank=True, db_column='org_class', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='Class+', to='apputil.dictionary', verbose_name='Class')),
            ],
            options={
                'db_table': 'taxonomy',
                'ordering': ['organism_name'],
            },
        ),
        migrations.CreateModel(
            name='OrgBatch_Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('passage_no', models.IntegerField(default=0, verbose_name='Passage No')),
                ('location_freezer', models.CharField(blank=True, max_length=80, null=True, verbose_name='Freezer')),
                ('location_rack', models.CharField(blank=True, max_length=10, null=True, verbose_name='Rack')),
                ('location_column', models.CharField(blank=True, max_length=10, null=True, verbose_name='Column')),
                ('location_slot', models.CharField(blank=True, max_length=10, null=True, verbose_name='Slot')),
                ('stock_type', models.CharField(blank=True, max_length=20, null=True, verbose_name='Stock Type')),
                ('stock_date', models.DateField(blank=True, null=True, verbose_name='Stock Date')),
                ('n_created', models.IntegerField(default=0, verbose_name='#Vials created')),
                ('n_left', models.IntegerField(default=0, verbose_name='#Vials left')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='orgbatch_stock_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('orgbatch_id', models.ForeignKey(db_column='orgbatch_id', on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism_batch', verbose_name='OrgBatch ID')),
            ],
            options={
                'db_table': 'orgbatch_stock',
                'ordering': ['orgbatch_id', 'stock_type'],
            },
        ),
        migrations.CreateModel(
            name='Organism_Culture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('astatus', models.IntegerField(db_index=True, default=0, editable=False, verbose_name='Status')),
                ('acreated_at', models.DateTimeField(editable=False, verbose_name='Created at')),
                ('aupdated_at', models.DateTimeField(editable=False, null=True, verbose_name='Updated at')),
                ('adeleted_at', models.DateTimeField(editable=False, null=True, verbose_name='Deleted at')),
                ('culture_type', models.CharField(blank=True, max_length=120, null=True, verbose_name='Culture Type')),
                ('media_use', models.CharField(blank=True, max_length=120, null=True, verbose_name='Media Use')),
                ('media', models.CharField(blank=True, max_length=120, null=True, verbose_name='Media')),
                ('atmosphere', models.CharField(blank=True, max_length=120, null=True, verbose_name='Atmosphere')),
                ('temperature', models.CharField(blank=True, max_length=25, null=True, verbose_name='Temperature')),
                ('labware', models.CharField(blank=True, max_length=120, null=True, verbose_name='Labware')),
                ('notes', models.CharField(blank=True, max_length=512, null=True, verbose_name='Media')),
                ('acreated', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('adeleted', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_deleted_by', to=settings.AUTH_USER_MODEL, verbose_name='Deleted by')),
                ('aupdated', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_culture_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('biologist', models.ForeignKey(db_column='biologist', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Biologist')),
                ('organism_id', models.ForeignKey(db_column='organism_id', on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.organism', verbose_name='Organism ID')),
            ],
            options={
                'db_table': 'organism_culture',
                'ordering': ['organism_id', 'culture_type', 'media_use'],
            },
        ),
        migrations.AddField(
            model_name='organism',
            name='organism_name',
            field=models.ForeignKey(db_column='organism_name', on_delete=django.db.models.deletion.DO_NOTHING, to='dorganism.taxonomy', verbose_name='Organism Name'),
        ),
        migrations.AddIndex(
            model_name='taxonomy',
            index=models.Index(fields=['org_class'], name='tax_orgclass_idx'),
        ),
        migrations.AddIndex(
            model_name='taxonomy',
            index=models.Index(fields=['tax_id'], name='tax_taxid_idx'),
        ),
        migrations.AddIndex(
            model_name='taxonomy',
            index=models.Index(fields=['division'], name='tax_div_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['stock_type'], name='orgbstock_stype_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['location_freezer'], name='orgbstock_freezer_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['stock_date'], name='orgbstock_stdate_idx'),
        ),
        migrations.AddIndex(
            model_name='orgbatch_stock',
            index=models.Index(fields=['n_left'], name='orgbstock_nleft_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_culture',
            index=models.Index(fields=['media_use'], name='orgcult_media_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_culture',
            index=models.Index(fields=['culture_type'], name='orgcult_ctype_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['organism_id', 'batch_no'], name='orgbatch_orgbatch_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['qc_status'], name='orgbatch_qc_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['supplier'], name='orgbatch_supp_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['stock_date'], name='orgbatch_sdate_idx'),
        ),
        migrations.AddIndex(
            model_name='organism_batch',
            index=models.Index(fields=['stock_level'], name='orgbatch_slevel_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['strain_id'], name='org_stid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['strain_otherids'], name='org_stother_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['strain_code'], name='org_stcode_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['strain_type'], name='org_strainid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['strain_panel'], name='org_stpanel_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['mta_status'], name='org_mta_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['tax_id'], name='org_taxid_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['risk_group'], name='org_riskgrp_idx'),
        ),
        migrations.AddIndex(
            model_name='organism',
            index=models.Index(fields=['pathogen_group'], name='org_pathgrp_idx'),
        ),
    ]
